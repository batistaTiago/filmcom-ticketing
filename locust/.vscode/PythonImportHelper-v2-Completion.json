[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "SequentialTaskSet",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "task",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "HttpUser",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "between",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "SequentialTaskSet",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "task",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "HttpUser",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "HttpUser",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "between",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "HttpUser",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "LoadTestShape",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "importPath": "auth_service",
        "description": "auth_service",
        "isExtraImport": true,
        "detail": "auth_service",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "importPath": "auth_service",
        "description": "auth_service",
        "isExtraImport": true,
        "detail": "auth_service",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "importPath": "auth_service",
        "description": "auth_service",
        "isExtraImport": true,
        "detail": "auth_service",
        "documentation": {}
    },
    {
        "label": "CreateFilmTask",
        "importPath": "film_creation.tasks.create_film_task",
        "description": "film_creation.tasks.create_film_task",
        "isExtraImport": true,
        "detail": "film_creation.tasks.create_film_task",
        "documentation": {}
    },
    {
        "label": "FilmService",
        "importPath": "film_picking.tasks.film_service",
        "description": "film_picking.tasks.film_service",
        "isExtraImport": true,
        "detail": "film_picking.tasks.film_service",
        "documentation": {}
    },
    {
        "label": "FilmPickingTask",
        "importPath": "film_picking.tasks.film_picking_task",
        "description": "film_picking.tasks.film_picking_task",
        "isExtraImport": true,
        "detail": "film_picking.tasks.film_picking_task",
        "documentation": {}
    },
    {
        "label": "FilmCreationLoadTest",
        "importPath": "film_creation.film_creation_load_test",
        "description": "film_creation.film_creation_load_test",
        "isExtraImport": true,
        "detail": "film_creation.film_creation_load_test",
        "documentation": {}
    },
    {
        "label": "FilmScrollingSimulationLoadTest",
        "importPath": "film_picking.film_scrolling_simulation_load_test",
        "description": "film_picking.film_scrolling_simulation_load_test",
        "isExtraImport": true,
        "detail": "film_picking.film_scrolling_simulation_load_test",
        "documentation": {}
    },
    {
        "label": "CreateFilmTask",
        "kind": 6,
        "importPath": "film_creation.tasks.create_film_task",
        "description": "film_creation.tasks.create_film_task",
        "peekOfCode": "class CreateFilmTask(SequentialTaskSet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.token = None\n        self.auth_service = AuthService(self.client)\n    def generate_film_data(self):\n        name = fake.catch_phrase()\n        year = fake.year()\n        duration = random.randint(80, 180)\n        return {",
        "detail": "film_creation.tasks.create_film_task",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "film_creation.tasks.create_film_task",
        "description": "film_creation.tasks.create_film_task",
        "peekOfCode": "fake = Faker()\nclass CreateFilmTask(SequentialTaskSet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.token = None\n        self.auth_service = AuthService(self.client)\n    def generate_film_data(self):\n        name = fake.catch_phrase()\n        year = fake.year()\n        duration = random.randint(80, 180)",
        "detail": "film_creation.tasks.create_film_task",
        "documentation": {}
    },
    {
        "label": "FilmCreationLoadTest",
        "kind": 6,
        "importPath": "film_creation.film_creation_load_test",
        "description": "film_creation.film_creation_load_test",
        "peekOfCode": "class FilmCreationLoadTest(HttpUser):\n    wait_time = between(1, 2)\n    tasks = [CreateFilmTask]\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)",
        "detail": "film_creation.film_creation_load_test",
        "documentation": {}
    },
    {
        "label": "FilmPickingTask",
        "kind": 6,
        "importPath": "film_picking.tasks.film_picking_task",
        "description": "film_picking.tasks.film_picking_task",
        "peekOfCode": "class FilmPickingTask(SequentialTaskSet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.token = None\n        self.auth_service = AuthService(self.client)\n        self.film_service = FilmService(self.client, self.auth_service)\n    @task\n    def login(self):\n        email = \"user@test.dev\"\n        password = \"password\"",
        "detail": "film_picking.tasks.film_picking_task",
        "documentation": {}
    },
    {
        "label": "FilmService",
        "kind": 6,
        "importPath": "film_picking.tasks.film_service",
        "description": "film_picking.tasks.film_service",
        "peekOfCode": "class FilmService:\n    def __init__(self, client: HttpUser, auth_service: AuthService):\n        self.client = client\n        self.auth_service = auth_service\n    def get_films(self, token):\n        headers = {\"Authorization\": f\"Bearer {token}\"}\n        next_page_url = \"/api/films\"\n        selected_film = None\n        film_count = 0\n        page_count = 0",
        "detail": "film_picking.tasks.film_service",
        "documentation": {}
    },
    {
        "label": "FilmScrollingSimulationLoadTest",
        "kind": 6,
        "importPath": "film_picking.film_scrolling_simulation_load_test",
        "description": "film_picking.film_scrolling_simulation_load_test",
        "peekOfCode": "class FilmScrollingSimulationLoadTest(HttpUser):\n    wait_time = between(1, 2)\n    tasks = [FilmPickingTask]\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)",
        "detail": "film_picking.film_scrolling_simulation_load_test",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "kind": 6,
        "importPath": "auth_service",
        "description": "auth_service",
        "peekOfCode": "class AuthService:\n    def __init__(self, client: HttpUser):\n        self.client = client\n    def login(self, email, password):\n        credentials = {\"email\": email, \"password\": password}\n        response = self.client.post(\"/auth/login\", json=credentials, name='Login')\n        if response.status_code == 200:\n            return response.json()[\"token\"]\n        else:\n            raise Exception(\"Failed to authenticate\")",
        "detail": "auth_service",
        "documentation": {}
    },
    {
        "label": "FilmLoadTestShape",
        "kind": 6,
        "importPath": "locustfile",
        "description": "locustfile",
        "peekOfCode": "class FilmLoadTestShape(LoadTestShape):\n    # You can customize this class to control the number of users and spawn rate for your tests\n    time_limit = 3600\n    user_limit = 1000\n    def tick(self):\n        # You can customize the number of users and spawn rate here\n        return 100, 1\n# Register both load tests to run simultaneously\nFilmCreationLoadTest.user_classes = [FilmCreationLoadTest, FilmScrollingSimulationLoadTest]",
        "detail": "locustfile",
        "documentation": {}
    },
    {
        "label": "FilmCreationLoadTest.user_classes",
        "kind": 5,
        "importPath": "locustfile",
        "description": "locustfile",
        "peekOfCode": "FilmCreationLoadTest.user_classes = [FilmCreationLoadTest, FilmScrollingSimulationLoadTest]",
        "detail": "locustfile",
        "documentation": {}
    }
]